(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library FixedPriceOrderbook_Proxy

let zero_address = 0x0000000000000000000000000000000000000000
let zero_uint32 = Uint32 0
let zero_uint128 = Uint128 0
let false = False
let true = True

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* for batch transitions *)
(* token_address, token_id, payment_token_address, sale_price, side, expiration block number *)
type OrderParam =
| OrderParam of ByStr20 with contract 
field royalty_recipient: ByStr20, 
field royalty_fee_bps: Uint128, 
field spenders: Map Uint256 ByStr20, 
field token_owners: Map Uint256 ByStr20 
end Uint256 ByStr20 Uint128 Uint32 BNum

(* Error exceptions *)
type Error =
  | NotContractOwnerError
  | NotPausedError
  | PausedError
  | SelfError
  | NotContractOwnershipRecipientError
  | NotMultiSigError
  | ZeroAddressError
  | InvalidStateContractError
  
let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotContractOwnerError              => Int32 -1
      | NotPausedError                     => Int32 -2
      | PausedError                        => Int32 -3
      | SelfError                          => Int32 -4
      | NotContractOwnershipRecipientError => Int32 -5
      | NotMultiSigError                   => Int32 -6
      | ZeroAddressError                   => Int32 -7
      | InvalidStateContractError          => Int32 -8
      end
    in
    { _exception : "Error"; source: "proxy"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FixedPriceOrderbook_Proxy (initial_contract_owner: ByStr20)

(* logic *)
field logic: ByStr20 = zero_address

(* state *)
field state_contract: ByStr20 = zero_address

(* Contract Owner *)
(* Defaults to `initial_contract_owner` *)
field contract_owner: ByStr20 = initial_contract_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

(* Emergency stop mechanism *)
(* Defaults to False *)
field is_paused: Bool = false

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure RequireNotPaused()
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end

procedure RequireNotSelf(address: ByStr20)
  is_self = builtin eq address _sender;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
procedure SetOrder_(token_address: ByStr20, token_id: Uint256, payment_token_address: ByStr20, sale_price: Uint128, side: Uint32, expiration_bnum: BNum)
  current_logic <- logic;
  current_state <- state_contract;
  RequireNonZeroAddress current_logic;
  RequireNonZeroAddress current_state;
  is_state <- &current_state as ByStr20 with contract field sell_side: Uint32 end;
  match is_state with
  | Some some_state =>
    sell_side_ <- &some_state.sell_side;
    is_sell_order = builtin eq side sell_side_;
    match is_sell_order with 
    | True =>  
      msg_to_set_order = {
        _tag: "SetOrder";
        _recipient: current_logic;
        _amount: Uint128 0;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        side: side;
        expiration_bnum: expiration_bnum
      };
      msgs = one_msg msg_to_set_order;
      send msgs
    | False =>
      accept;
      msg_to_set_order = {
        _tag: "SetOrder";
        _recipient: current_logic;
        _amount: _amount;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        side: side;
        expiration_bnum: expiration_bnum
      };
      msgs = one_msg msg_to_set_order;
      send msgs
    end
  | None => 
    error = InvalidStateContractError;
    Throw error
  end
end

procedure SetBatchOrders_(order: OrderParam)
  match order with
  | OrderParam token_address token_id payment_token_address sale_price side expiration_bnum =>
    SetOrder_ token_address token_id payment_token_address sale_price side expiration_bnum
  end
end

transition SetOrder(order: OrderParam)
  match order with
  | OrderParam token_address token_id payment_token_address sale_price side expiration_bnum =>
    SetOrder_ token_address token_id payment_token_address sale_price side expiration_bnum
  end
end

(* Batch set order *)
transition SetBatchOrder(order_list: List OrderParam)
  RequireNotPaused;
  forall order_list SetBatchOrders_
end

(* @multi-sig *)
transition UpdateLogic(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq initial_contract_owner _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    current_block_number <- & BLOCKNUMBER;
    logic := to;
    e = { 
      _eventname: "ProxyUpdated";
      address: to;
      when: current_block_number
    };
    event e
  end
end

(* @multi-sig *)
transition UpdateState(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq initial_contract_owner _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    current_block_number <- & BLOCKNUMBER;
    state_contract := to;
    e = { 
      _eventname: "StateContractUpdated";
      address: to;
      when: current_block_number
    };
    event e
  end
end

(* Fulfills orders *)
transition FulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32,
  (* `dest` enables buyers to set an address to receive the asset when fulfilling a sell order. *)
  (* `dest` is only meaningful for buyers at the moment *)
  dest: ByStr20,
  seller: ByStr20,
  buyer: ByStr20
  )
  RequireNotPaused;
  current_logic <- logic;
  current_state <- state_contract;
  RequireNonZeroAddress current_logic;
  RequireNonZeroAddress current_state;
  is_state <- &current_state as ByStr20 with contract field sell_side: Uint32 end;
  match is_state with
  | Some some_state =>
    sell_side_ <- &some_state.sell_side;
    is_sell_order = builtin eq side sell_side_;
    match is_sell_order with 
    | True =>  
      accept;
      msg_to_fullfillorder = {
        _tag: "FulfillOrder";
        _recipient: current_logic;
        _amount: _amount;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        side: side;
        dest: dest;
        buyer: buyer;
        seller: seller
      };
      msgs = one_msg msg_to_fullfillorder;
      send msgs
    | False =>
      msg_to_fullfillorder = {
        _tag: "FulfillOrder";
        _recipient: current_logic;
        _amount: Uint128 0;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        side: side;
        dest: dest;
        buyer: buyer;
        seller: seller
      };
      msgs = one_msg msg_to_fullfillorder;
      send msgs
    end
  | None => 
    error = InvalidStateContractError;
    Throw error
  end
end

(* @multi-sig *)
(* Cancels orders *)
transition CancelOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
)
  RequireNotPaused;
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_cancel = {
    _tag: "CancelOrder";
    _recipient: current_logic;
    _amount: Uint128 0;
    token_address: token_address;
    token_id: token_id;
    payment_token_address: payment_token_address;
    sale_price: sale_price;
    side: side
  };
  msgs = one_msg msg_to_cancel;
  send msgs
end

(* @multi-sig *)
(* Pauses the contract. Use this when things are going wrong ('circuit breaker'). *)
transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

(* @multi-sig *)
(* Unpauses the contract. *)
transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

(* @multi-sig *)
(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to;
  
  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e
end

(* @multi-sig *)
(* Sets `contract_ownership_recipient` as the contract owner. *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e
  end
end