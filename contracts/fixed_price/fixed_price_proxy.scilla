(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library FixedPriceOrderbook_Proxy

let zero_address = 0x0000000000000000000000000000000000000000
let zero_uint32 = Uint32 0
let zero_uint128 = Uint128 0
let false = False
let true = True

let min_bps = Uint128 1
let max_bps = Uint128 10000

let sell_side = Uint32 0

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let three_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
fun (msg3: Message) =>
  let msgs_tmp = two_msgs msg2 msg3 in
  Cons {Message} msg1 msgs_tmp

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let portion = 
  fun(amount: Uint128) =>
  fun(bps: Uint128) => 
    let max_bps256 = uint128_to_uint256 max_bps in
    let amount256 = uint128_to_uint256 amount in
    let bps256 = uint128_to_uint256 bps in
    let x256 = builtin mul amount256 bps256 in
    let res256 = builtin div x256 max_bps256 in
    let ores128 = builtin to_uint128 res256 in
    match ores128 with
    | None =>
      zero_uint128
    | Some res128 =>
      res128
    end
  

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (maybe_val: Option 'A) =>
    match maybe_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let option_uint32 = @option_value Uint32
let option_uint128 = @option_value Uint128

(* Computes the commission_fee if there is one. If not, it returns Uint128 0 *)
let compute_commission_fee = 
  fun(sale_price: Uint128) =>
  fun(opt_commission_fee_bps: Option Uint128) =>
  fun(maybe_has_had_first_sale: Bool) =>
    match maybe_has_had_first_sale with
      | True => 
        zero_uint128
      | False => 
        let brand_commission_fee = option_uint128 zero_uint128 opt_commission_fee_bps in
          portion sale_price brand_commission_fee
    end

(* maker, expiration block number *)
type Order = 
| Order of ByStr20 BNum

(* for batch transitions *)
(* token_address, token_id, payment_token_address, sale_price, side, expiration block number *)
type OrderParam =
| OrderParam of ByStr20 with contract 
field royalty_recipient: ByStr20, 
field royalty_fee_bps: Uint128, 
field spenders: Map Uint256 ByStr20, 
field token_owners: Map Uint256 ByStr20 
end Uint256 ByStr20 Uint128 Uint32 BNum

(* Error exceptions *)
type Error =
  | NotContractOwnerError
  | NotPausedError
  | PausedError
  | ZeroAddressDestinationError
  | ThisAddressDestinationError
  | SellOrderNotFoundError
  | BuyOrderNotFoundError
  | NotSpenderError
  | NotTokenOwnerError
  | TokenOwnerError
  | ExpiredError
  | NotAllowedToCancelOrder
  | NotSelfError
  | SelfError
  | NotAllowedPaymentToken
  | InvalidBPSError
  | NotEqualAmountError
  | NotContractOwnershipRecipientError
  | NotAllowedUserError
  | TotalFeesTooHigh
  | InvalidRoyaltyFeeBPSError
  | NotMultiSigError
  | ZeroAddressError
  
let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotContractOwnerError              => Int32 -1
      | NotPausedError                     => Int32 -2
      | PausedError                        => Int32 -3
      | ZeroAddressDestinationError        => Int32 -4
      | ThisAddressDestinationError        => Int32 -5
      | SellOrderNotFoundError             => Int32 -6
      | BuyOrderNotFoundError              => Int32 -7
      | NotSpenderError                    => Int32 -8
      | NotTokenOwnerError                 => Int32 -9
      | TokenOwnerError                    => Int32 -10
      | ExpiredError                       => Int32 -11
      | NotAllowedToCancelOrder            => Int32 -12
      | NotSelfError                       => Int32 -13
      | SelfError                          => Int32 -14
      | NotAllowedPaymentToken             => Int32 -15
      | InvalidBPSError                    => Int32 -16
      | NotEqualAmountError                => Int32 -17
      | NotContractOwnershipRecipientError => Int32 -18
      | NotAllowedUserError                => Int32 -19
      | TotalFeesTooHigh                   => Int32 -20
      | InvalidRoyaltyFeeBPSError          => Int32 -21
      | NotMultiSigError                   => Int32 -22
      | ZeroAddressError                   => Int32 -23
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FixedPriceOrderbook
(
  initial_contract_owner: ByStr20,
  initial_collection_contract: ByStr20 with contract
    field token_collection: Map ByStr20 (Map Uint256 Uint32),
    field collection_owning_brand: Map Uint32 ByStr20,
    field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
    field collection_commission_fee: Map Uint32 Uint128
  end
)

(* 
  A composite primary key of a sell order or buy order consists of
  - asset contract address (ZRC-6)
  - token ID
  - payment token contract address (ZRC-2)
  - sale price
*)

(* Allowlist Contract Address *)
(* Defaults to `zero_address` *)
field allowlist_address: ByStr20 = zero_address

(* logic *)
field logic: ByStr20 = zero_address

(* Collection Contract Address *)
field collection_address: ByStr20 with contract
  field token_collection: Map ByStr20 (Map Uint256 Uint32),
  field collection_owning_brand: Map Uint32 ByStr20,
  field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
  field collection_commission_fee: Map Uint32 Uint128
end = initial_collection_contract

(* Contract Owner *)
(* Defaults to `initial_contract_owner` *)
field contract_owner: ByStr20 = initial_contract_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

(* Emergency stop mechanism *)
(* Defaults to False *)
field is_paused: Bool = false

(* token_address -> ( token_id -> ( payment_token_address -> (sale_price -> sell_order  ) ) *)
field sell_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))) = Emp ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))

(* token_address -> ( token_id -> ( payment_token_address -> (sale_price -> buy_order ) ) *)
field buy_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))) = Emp ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))

(* There must be an allowlist for the payment tokens (ZRC-2) *)
field allowed_payment_tokens: Map ByStr20 Bool = Emp ByStr20 Bool

(* service fee BPS (e.g. 250 = 2.5% *)
(* A marketplace may take service fee (x% of every transaction) and use basis points (BPS) for the fee.  *)
(* `service_fee_bps` must range from `1` to `10000`. *)
(* Defaults to 250 *)
field service_fee_bps: Uint128 = Uint128 250

field service_fee_recipient: ByStr20 = initial_contract_owner

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure RequireNotPaused()
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end

procedure RequireValidDestination(to: ByStr20)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressDestinationError;
    Throw error
  end;

  is_this_address = builtin eq to _this_address;
  match is_this_address with
  | False =>
  | True =>
    error = ThisAddressDestinationError;
    Throw error
  end
end

procedure RequireValidBPS(val_bps: Uint128)
  is_gte_min = uint128_ge val_bps min_bps;
  is_lte_max = uint128_le val_bps max_bps;
  
  is_valid = andb is_gte_min is_lte_max;
  match is_valid with 
    | True => 
    | False =>
      error = InvalidBPSError;
      Throw error
  end
end

procedure RequireValidRoyaltyFeeBPS(val_bps: Uint128)
  (* max: 25% (arbitrary number) *)
  max = Uint128 2500;
  is_gte_min = uint128_ge val_bps min_bps;
  is_lte_max = uint128_le val_bps max;
  
  is_valid = andb is_gte_min is_lte_max;
  match is_valid with 
    | True => 
    | False =>
      error = InvalidRoyaltyFeeBPSError;
      Throw error
  end
end

procedure RequireValidTotalFees(token_address: ByStr20 with contract 
    field royalty_fee_bps: Uint128
  end,
  token_id: Uint256
  )
  (* royalty_fee_bps *)
  royalty_fee_bps <- & token_address.royalty_fee_bps;

  (* service_fee_bps *)
  svc_fee_bps <- service_fee_bps;

  (* commission_fee_bps *)
  collections_contract <- collection_address;
  opt_collection_id <- & collections_contract.token_collection[token_address][token_id];
  collection_id = option_uint32 zero_uint32 opt_collection_id;
  opt_commission_fee_bps <- & collections_contract.collection_commission_fee[collection_id];
  commission_fee_bps = option_uint128 zero_uint128 opt_commission_fee_bps;
  
  royalty_and_service_fee_bps = builtin add royalty_fee_bps svc_fee_bps;
  total_fee_bps = builtin add royalty_and_service_fee_bps commission_fee_bps;

  hundred_percent = Uint128 100000;
  is_lte_max = uint128_lt total_fee_bps hundred_percent;
  
  match is_lte_max with 
    | True => 
    | False =>
      error = TotalFeesTooHigh;
      Throw error
  end
end

procedure RequireAllowedPaymentToken(payment_token_address: ByStr20)
  is_zero_address = builtin eq payment_token_address zero_address;
  is_allowed_zrc2_address <- exists allowed_payment_tokens[payment_token_address];

  is_allowed = orb is_zero_address is_allowed_zrc2_address;
  match is_allowed with
  | True =>
  | False =>
    error = NotAllowedPaymentToken;
    Throw error
  end
end

procedure RequireEqualZILAmount(amount: Uint128)
  is_eq = builtin eq amount _amount;
  match is_eq with
  | True =>
  | False =>
    error = NotEqualAmountError;
    Throw error
  end
end

procedure RequireAccessToCancel(maker_address: ByStr20)
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  is_maker = builtin eq maker_address _sender;

  is_allowed_to_cancel_order = orb is_maker is_contract_owner;
  match is_allowed_to_cancel_order with
  | True =>
  | False =>
    error = NotAllowedToCancelOrder;
    Throw error
  end
end

procedure RequireNotSelf(address: ByStr20)
  is_self = builtin eq address _sender;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireSelf(address: ByStr20)
  is_self = builtin eq address _sender;
  match is_self with
  | True =>
  | False =>
    error = NotSelfError;
    Throw error
  end
end

procedure RequireNotExpired(expiration_bnum: BNum)
  cur_bnum <- & BLOCKNUMBER;  
  is_not_expired = builtin blt cur_bnum expiration_bnum;
  match is_not_expired with
  | True =>
  | False =>
    error = ExpiredError;
    Throw error
  end
end

procedure RequireAllowedUser(address: ByStr20)
  allowlist <- allowlist_address;
  is_zero_address = builtin eq zero_address allowlist;
  match is_zero_address with
  | True =>
    (* Noop *)
    (* This contract doesn't use allowlist *)
  | False =>
    maybe_allowlist_contract_address <- & allowlist as ByStr20 with contract field allowed_addresses: Map ByStr20 Bool end;
    match maybe_allowlist_contract_address with 
    | None => 
    | Some contract_address =>
      maybe_allowed_address <- & contract_address.allowed_addresses[address];
      match maybe_allowed_address with
      | Some _ =>
        (* Noop *)
        (* The address is allowed *)
      | None =>
        error = NotAllowedUserError;
        Throw error
      end
    end
  end
end

procedure RequireThisToBeSpender(token_address: ByStr20 with contract field spenders: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_spender <- & token_address.spenders[token_id];
  spender = option_address zero_address maybe_spender;
  is_spender = builtin eq _this_address spender;
  match is_spender with
  | True =>
  | False =>
    error = NotSpenderError;
    Throw error
  end
end

procedure RequireSenderToBeTokenOwner(token_address: ByStr20 with contract field token_owners: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_token_owner <- & token_address.token_owners[token_id];
  token_owner = option_address zero_address maybe_token_owner;
  is_token_owner = builtin eq _sender token_owner;
  match is_token_owner with
  | True =>
  | False =>
    error = NotTokenOwnerError;
    Throw error
  end
end

procedure RequireSenderNotToBeTokenOwner(token_address: ByStr20 with contract field token_owners: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_token_owner <- & token_address.token_owners[token_id];
  token_owner = option_address zero_address maybe_token_owner;
  is_token_owner = builtin eq _sender token_owner;
  match is_token_owner with
  | False =>
  | True =>
    error = TokenOwnerError;
    Throw error
  end
end

procedure ZRC2TransferFrom(payment_token_address: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
  msg_to_zrc2 = {
    _tag: "TransferFrom";
    _recipient: payment_token_address;
    _amount: Uint128 0;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_to_zrc2;
  send msgs
end

procedure ZRC6TransferFrom(
  token_address: ByStr20,
  to: ByStr20,
  token_id: Uint256)
  msg_to_zrc6 = {
    _tag: "TransferFrom";
    _recipient: token_address;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg msg_to_zrc6;
  send msgs
end

procedure SendZilIfNotZero(recipient : ByStr20, amount : Uint128)
  is_zero = builtin eq amount zero_uint128;
  match is_zero with
  | False => 
    msg = {
      _tag: "AddFunds";
      _recipient: recipient;
      _amount: amount
    };
    msg = one_msg msg;
    send msg
  | True => (* do not send zero amounts *)
  end
end

procedure UpdateCollectionContract_(
  address: ByStr20 with contract 
    field token_collection: Map ByStr20 (Map Uint256 Uint32),
    field collection_owning_brand: Map Uint32 ByStr20,
    field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
    field collection_commission_fee: Map Uint32 Uint128
  end
)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "UpdateCollectionContract";
    _recipient: current_logic;
    _amount: Uint128 0;
    new_collection_address: address
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure SetAllowlist_(
  address: ByStr20 with contract field 
    allowed_addresses : Map ByStr20 Bool 
  end
)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "SetAllowlist";
    _recipient: current_logic;
    _amount: Uint128 0;
    address: address
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure ClearAllowList_()
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "ClearAllowList";
    _recipient: current_logic;
    _amount: Uint128 0
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure SetServiceFeeRecipient_(to: ByStr20)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "SetServiceFeeRecipient";
    _recipient: current_logic;
    _amount: Uint128 0;
    to: to
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure SetServiceFeeBPS_(fee_bps: Uint128)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "SetServiceFeeBPS";
    _recipient: current_logic;
    _amount: Uint128 0;
    fee_bps: fee_bps
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure DisallowPaymentTokenAddress_(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "DisallowPaymentTokenAddress";
    _recipient: current_logic;
    _amount: Uint128 0;
    address: address
  };
  msgs = one_msg msg_to_update;
  send msgs
end

procedure AllowPaymentTokenAddress_(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_update = {
    _tag: "AllowPaymentTokenAddress";
    _recipient: current_logic;
    _amount: Uint128 0;
    address: address
  };
  msgs = one_msg msg_to_update;
  send msgs
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
procedure DoSetOrder(order: OrderParam)
  match order with
  | OrderParam token_address token_id payment_token_address sale_price side expiration_bnum =>
    RequireNotExpired expiration_bnum;
    RequireAllowedPaymentToken payment_token_address;
    RequireThisToBeSpender token_address token_id;
    RequireValidTotalFees token_address token_id;

    is_sell_order = builtin eq side sell_side;
    match is_sell_order with 
    | True => 
      (* Side: Sell *)
      (* Only the token owner can create sell orders *)
      RequireSenderToBeTokenOwner token_address token_id;
      
      (* set new sell order *)
      new_order = Order _sender expiration_bnum;
      sell_orders[token_address][token_id][payment_token_address][sale_price] := new_order;
      
      e = {
        _eventname : "SetOrder";
        maker: _sender;
        side: side;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        expiration_bnum: expiration_bnum
      };
      event e
    | False => 
      (* Side: Buy *)
      (* The token owner must not be able to create buy orders *)
      RequireSenderNotToBeTokenOwner token_address token_id;

      (* The currency is ZIL if the payment_token_address is zero address *)
      is_native_zil = builtin eq payment_token_address zero_address;

      maybe_buy_order <- buy_orders[token_address][token_id][payment_token_address][sale_price];
      match maybe_buy_order with 
        | None =>
          (* create a buy order *)
          match is_native_zil with 
          | False =>
          | True => 
            (* _amount must be equal to sale_price *)
            RequireEqualZILAmount sale_price;
            (* ZILs must be accepted only if a buy order is newly created *)
            accept
          end
        | Some (Order buyer _) => 
          (* update the buy order *)
          RequireSelf buyer
      end;

      (* set new buy order *)
      new_order = Order _sender expiration_bnum;

      buy_orders[token_address][token_id][payment_token_address][sale_price] := new_order;

      e = {
        _eventname : "SetOrder";
        maker: _sender;
        side: side;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price;
        expiration_bnum: expiration_bnum
      };
      event e
    end
  end
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
(*transition SetOrder(order: OrderParam)*)
(*  RequireNotPaused;*)
(*  DoSetOrder order*)
(*end*)

transition SetOrder(order: OrderParam)
  match order with
  | OrderParam token_address token_id payment_token_address sale_price side expiration_bnum =>
    current_logic <- logic;
    RequireNonZeroAddress current_logic;
    msg_to_set_order = {
      _tag: "SetOrder";
      _recipient: current_logic;
      _amount: Uint128 0;
      token_address: token_address;
      token_id: token_id;
      payment_token_address: payment_token_address;
      sale_price: sale_price;
      side: side;
      expiration_bnum: expiration_bnum
    };
    msgs = one_msg msg_to_set_order;
    send msgs
  end
end

(* Batch set order *)
transition SetBatchOrder(order_list: List OrderParam)
  RequireNotPaused;
  RequireAllowedUser _sender;
  
  forall order_list DoSetOrder
end

(* @multi-sig *)
transition UpdateLogic(to: ByStr20)
  RequireNonZeroAddress to;
  is_valid = builtin eq initial_contract_owner _sender;
  match is_valid with
  | False =>
    error = NotMultiSigError;
    Throw error
  | True =>
    current_block_number <- & BLOCKNUMBER;
    logic := to;
    e = { 
      _eventname: "ProxyUpdated";
      address: to;
      when: current_block_number
    };
    event e
  end
end

(* Fulfills orders *)
transition FulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32,
  (* `dest` enables buyers to set an address to receive the asset when fulfilling a sell order. *)
  (* `dest` is only meaningful for buyers at the moment *)
  dest: ByStr20
  )
  RequireNotPaused;
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_fullfillorder = {
    _tag: "FulfillOrder";
    _recipient: current_logic;
    _amount: Uint128 0;
    token_address: token_address;
    token_id: token_id;
    payment_token_address: payment_token_address;
    sale_price: sale_price;
    side: side;
    dest: dest
  };
  msgs = one_msg msg_to_fullfillorder;
  send msgs
end

(* @multi-sig *)
(* Cancels orders *)
transition CancelOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
)
  RequireNotPaused;
  current_logic <- logic;
  RequireNonZeroAddress current_logic;
  msg_to_cancel = {
    _tag: "CancelOrder";
    _recipient: current_logic;
    _amount: Uint128 0;
    token_address: token_address;
    token_id: token_id;
    payment_token_address: payment_token_address;
    sale_price: sale_price;
    side: side
  };
  msgs = one_msg msg_to_cancel;
  send msgs
end

(* @multi-sig *)
(* Pauses the contract. Use this when things are going wrong ('circuit breaker'). *)
transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

(* @multi-sig *)
(* Unpauses the contract. *)
transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

(* @multi-sig *)
transition AllowPaymentTokenAddress(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  RequireNotPaused;
  AllowPaymentTokenAddress_ address
end

(* @multi-sig *)
transition DisallowPaymentTokenAddress(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  RequireNotPaused;
  DisallowPaymentTokenAddress_ address
end

(* @multi-sig *)
transition SetServiceFeeBPS(fee_bps: Uint128)
  RequireNotPaused;
  SetServiceFeeBPS_ fee_bps
end

(* @multi-sig *)
transition SetServiceFeeRecipient(to: ByStr20)
  RequireNotPaused;
  SetServiceFeeRecipient_ to
end

(* @multi-sig *)
transition ClearAllowList()
  RequireNotPaused;
  ClearAllowList_
end

(* @multi-sig *)
transition SetAllowlist(
  address: ByStr20 with contract field 
    allowed_addresses : Map ByStr20 Bool 
  end
  )
  RequireNotPaused;
  SetAllowlist_ address
end

(* @multi-sig *)
transition UpdateCollectionContract(
  address: ByStr20 with contract 
    field token_collection: Map ByStr20 (Map Uint256 Uint32),
    field collection_owning_brand: Map Uint32 ByStr20,
    field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
    field collection_commission_fee: Map Uint32 Uint128
  end
  )
  RequireNotPaused;
  UpdateCollectionContract_ address
end

(* @multi-sig *)
(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to;
  
  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e
end

(* @multi-sig *)
(* Sets `contract_ownership_recipient` as the contract owner. *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e
  end
end