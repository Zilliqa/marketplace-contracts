(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library FixedPriceOrderbook_Logic

let zero_address = 0x0000000000000000000000000000000000000000
let zero_uint32 = Uint32 0
let zero_uint128 = Uint128 0
let false = False
let true = True

let min_bps = Uint128 1
let max_bps = Uint128 10000

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let three_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
fun (msg3: Message) =>
  let msgs_tmp = two_msgs msg2 msg3 in
  Cons {Message} msg1 msgs_tmp

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let portion = 
  fun(amount: Uint128) =>
  fun(bps: Uint128) => 
    let max_bps256 = uint128_to_uint256 max_bps in
    let amount256 = uint128_to_uint256 amount in
    let bps256 = uint128_to_uint256 bps in
    let x256 = builtin mul amount256 bps256 in
    let res256 = builtin div x256 max_bps256 in
    let ores128 = builtin to_uint128 res256 in
    match ores128 with
    | None =>
      zero_uint128
    | Some res128 =>
      res128
    end
  

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (maybe_val: Option 'A) =>
    match maybe_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20
let option_uint32 = @option_value Uint32
let option_uint128 = @option_value Uint128
let option_bool = @option_value Bool

(* Computes the commission_fee if there is one. If not, it returns Uint128 0 *)
let compute_commission_fee = 
  fun(sale_price: Uint128) =>
  fun(opt_commission_fee_bps: Option Uint128) =>
  fun(maybe_has_had_first_sale: Bool) =>
    match maybe_has_had_first_sale with
      | True => 
        zero_uint128
      | False => 
        let brand_commission_fee = option_uint128 zero_uint128 opt_commission_fee_bps in
          portion sale_price brand_commission_fee
    end

(* maker, expiration block number *)
type Order = 
| Order of ByStr20 BNum

(* for batch transitions *)
(* token_address, token_id, payment_token_address, sale_price, side, expiration block number *)
type OrderParam =
| OrderParam of ByStr20 with contract 
field royalty_recipient: ByStr20, 
field royalty_fee_bps: Uint128, 
field spenders: Map Uint256 ByStr20, 
field token_owners: Map Uint256 ByStr20 
end Uint256 ByStr20 Uint128 Uint32 BNum

(* Error exceptions *)
type Error =
  | NotContractOwnerError
  | NotPausedError
  | PausedError
  | ZeroAddressDestinationError
  | ThisAddressDestinationError
  | SellOrderNotFoundError
  | BuyOrderNotFoundError
  | NotSpenderError
  | NotTokenOwnerError
  | TokenOwnerError
  | ExpiredError
  | NotAllowedToCancelOrder
  | NotSelfError
  | SelfError
  | NotAllowedPaymentToken
  | InvalidBPSError
  | NotEqualAmountError
  | NotContractOwnershipRecipientError
  | NotAllowedUserError
  | TotalFeesTooHigh
  | InvalidRoyaltyFeeBPSError
  | NotProxyAdminError
  | ZeroAddressError
  | InvalidSellSideError
  | AllowListNotFoundError
  | AllowedPaymentTokensContractNotFoundError
  | CollectionAddressNotFoundError
  | InvalidCollectionAddress
  | InvalidStateContractError1
  | InvalidStateContractError2
  | InvalidStateContractError3
  
let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotContractOwnerError                       => Int32 -1
      | NotPausedError                              => Int32 -2
      | PausedError                                 => Int32 -3
      | ZeroAddressDestinationError                 => Int32 -4
      | ThisAddressDestinationError                 => Int32 -5
      | SellOrderNotFoundError                      => Int32 -6
      | BuyOrderNotFoundError                       => Int32 -7
      | NotSpenderError                             => Int32 -8
      | NotTokenOwnerError                          => Int32 -9
      | TokenOwnerError                             => Int32 -10
      | ExpiredError                                => Int32 -11
      | NotAllowedToCancelOrder                     => Int32 -12
      | NotSelfError                                => Int32 -13
      | SelfError                                   => Int32 -14
      | NotAllowedPaymentToken                      => Int32 -15
      | InvalidBPSError                             => Int32 -16
      | NotEqualAmountError                         => Int32 -17
      | NotContractOwnershipRecipientError          => Int32 -18
      | NotAllowedUserError                         => Int32 -19
      | TotalFeesTooHigh                            => Int32 -20
      | InvalidRoyaltyFeeBPSError                   => Int32 -21
      | NotProxyAdminError                          => Int32 -22
      | ZeroAddressError                            => Int32 -23
      | InvalidSellSideError                        => Int32 -24
      | AllowListNotFoundError                      => Int32 -25
      | AllowedPaymentTokensContractNotFoundError   => Int32 -26
      | CollectionAddressNotFoundError              => Int32 -27
      | InvalidCollectionAddress                    => Int32 -28
      | InvalidStateContractError1                  => Int32 -29
      | InvalidStateContractError2                  => Int32 -30
      | InvalidStateContractError3                  => Int32 -31
      end
    in
    { _exception : "Error"; source: "Logic"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FixedPriceOrderbook_Logic (
  initial_contract_owner: ByStr20,
  state: ByStr20,
  proxy: ByStr20,
  transfer_proxy: ByStr20
)

(* Contract Owner *)
(* Defaults to `initial_contract_owner` *)
field contract_owner: ByStr20 = initial_contract_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

(* Emergency stop mechanism *)
(* Defaults to False *)
field is_paused: Bool = false

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireProxy()
  current_proxy = proxy;
  is_proxy_admin = builtin eq current_proxy _sender;
  match is_proxy_admin with
  | True => 
  | False =>
    error = NotProxyAdminError;
    Throw error
  end
end

procedure RequireNonZeroAddress(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressError;
    Throw error
  end
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNotPaused()
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end

procedure RequireValidDestination(to: ByStr20)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressDestinationError;
    Throw error
  end;

  is_this_address = builtin eq to _this_address;
  match is_this_address with
  | False =>
  | True =>
    error = ThisAddressDestinationError;
    Throw error
  end
end

procedure RequireValidBPS(val_bps: Uint128)
  is_gte_min = uint128_ge val_bps min_bps;
  is_lte_max = uint128_le val_bps max_bps;
  
  is_valid = andb is_gte_min is_lte_max;
  match is_valid with 
    | True => 
    | False =>
      error = InvalidBPSError;
      Throw error
  end
end

procedure RequireValidRoyaltyFeeBPS(val_bps: Uint128)
  (* max: 25% (arbitrary number) *)
  max = Uint128 2500;
  is_gte_min = uint128_ge val_bps min_bps;
  is_lte_max = uint128_le val_bps max;
  
  is_valid = andb is_gte_min is_lte_max;
  match is_valid with 
    | True => 
    | False =>
      error = InvalidRoyaltyFeeBPSError;
      Throw error
  end
end

procedure RequireValidTotalFees(token_address: ByStr20 with contract 
    field royalty_fee_bps: Uint128
  end,
  token_id: Uint256
  )
  (* royalty_fee_bps *)
  royalty_fee_bps <- & token_address.royalty_fee_bps;

  is_state <- &state as ByStr20 with contract
    field service_fee_bps: Uint128,
    field collection_address: ByStr20
  end;

  match is_state with
  | Some some_value =>
    svc_fee_bps <- &some_value.service_fee_bps;
    collections_contract_ <- &some_value.collection_address;
    is_zero_address = builtin eq zero_address collections_contract_;

    match is_zero_address with
    | True => 
      error = InvalidCollectionAddress;
      Throw error
    | False => 
      maybe_collections_contract_ <- & collections_contract_ as ByStr20 with contract
        field token_collection: Map ByStr20 (Map Uint256 Uint32),
        field collection_owning_brand: Map Uint32 ByStr20,
        field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
        field collection_commission_fee: Map Uint32 Uint128
      end;

      match maybe_collections_contract_ with 
      | None => 
        error = InvalidCollectionAddress;
        Throw error
      | Some collections_contract => 
        (* commission_fee_bps *)
        opt_collection_id <- & collections_contract.token_collection[token_address][token_id];
        collection_id = option_uint32 zero_uint32 opt_collection_id;
        opt_commission_fee_bps <- & collections_contract.collection_commission_fee[collection_id];
        commission_fee_bps = option_uint128 zero_uint128 opt_commission_fee_bps;
        
        royalty_and_service_fee_bps = builtin add royalty_fee_bps svc_fee_bps;
        total_fee_bps = builtin add royalty_and_service_fee_bps commission_fee_bps;
      
        hundred_percent = Uint128 100000;
        is_lte_max = uint128_lt total_fee_bps hundred_percent;
        
        match is_lte_max with 
          | True => 
          | False =>
            error = TotalFeesTooHigh;
            Throw error
        end
      end
    end
  | None =>
    error = InvalidStateContractError1;
    Throw error
  end
end

procedure RequireAllowedPaymentToken(payment_token_address: ByStr20)
  is_zero_address = builtin eq payment_token_address zero_address;
  allowed_payment_tokens_exist <- &state as ByStr20 with contract field allowed_payment_tokens: Map ByStr20 Bool end;
  match allowed_payment_tokens_exist with
  | Some c =>
    is_allowed_zrc2_address <- &c.allowed_payment_tokens[payment_token_address];
    allowed_zrc2_address = option_bool true is_allowed_zrc2_address;
    is_allowed = orb is_zero_address allowed_zrc2_address;
    match is_allowed with
    | True =>
    | False =>
      error = NotAllowedPaymentToken;
      Throw error
    end
  | None => 
    error = AllowedPaymentTokensContractNotFoundError;
    Throw error
  end
end

procedure RequireEqualZILAmount(amount: Uint128)
  is_eq = builtin eq amount _amount;
  match is_eq with
  | True =>
  | False =>
    error = NotEqualAmountError;
    Throw error
  end
end

procedure RequireAccessToCancel(maker_address: ByStr20)
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  is_maker = builtin eq maker_address _origin;

  is_allowed_to_cancel_order = orb is_maker is_contract_owner;
  match is_allowed_to_cancel_order with
  | True =>
  | False =>
    error = NotAllowedToCancelOrder;
    Throw error
  end
end

procedure RequireNotSelf(address: ByStr20)
  is_self = builtin eq address _origin;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireSelf(address: ByStr20)
  is_self = builtin eq address _origin;
  match is_self with
  | True =>
  | False =>
    error = NotSelfError;
    Throw error
  end
end

procedure RequireNotExpired(expiration_bnum: BNum)
  cur_bnum <- & BLOCKNUMBER;  
  is_not_expired = builtin blt cur_bnum expiration_bnum;
  match is_not_expired with
  | True =>
  | False =>
    error = ExpiredError;
    Throw error
  end
end

procedure RequireAllowedUser(address: ByStr20)
  is_allowlist_exist <- &state as ByStr20 with contract field allowlist_address: ByStr20 end;
  match is_allowlist_exist with
  | Some c =>
    allowlist <- &c.allowlist_address;
    is_zero_address = builtin eq zero_address allowlist;
    match is_zero_address with
    | True =>
      (* Noop *)
      (* This contract doesn't use allowlist *)
    | False =>
      maybe_allowlist_contract_address <- & allowlist as ByStr20 with contract field allowed_addresses: Map ByStr20 Bool end;
      match maybe_allowlist_contract_address with 
      | None => 
      | Some contract_address =>
        maybe_allowed_address <- & contract_address.allowed_addresses[address];
        match maybe_allowed_address with
        | Some _ =>
          (* Noop *)
          (* The address is allowed *)
        | None =>
          error = NotAllowedUserError;
          Throw error
        end
      end
    end
  | None => 
    error = AllowListNotFoundError;
    Throw error
  end
end

procedure RequireThisToBeSpender(token_address: ByStr20 with contract field spenders: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_spender <- & token_address.spenders[token_id];
  spender = option_address zero_address maybe_spender;
  is_spender = builtin eq transfer_proxy spender;
  match is_spender with
  | True =>
  | False =>
    error = NotSpenderError;
    Throw error
  end
end

procedure RequireSenderToBeTokenOwner(token_address: ByStr20 with contract field token_owners: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_token_owner <- & token_address.token_owners[token_id];
  token_owner = option_address zero_address maybe_token_owner;
  is_token_owner = builtin eq _origin token_owner;
  match is_token_owner with
  | True =>
  | False =>
    error = NotTokenOwnerError;
    Throw error
  end
end

procedure RequireSenderNotToBeTokenOwner(token_address: ByStr20 with contract field token_owners: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_token_owner <- & token_address.token_owners[token_id];
  token_owner = option_address zero_address maybe_token_owner;
  is_token_owner = builtin eq _origin token_owner;
  match is_token_owner with
  | False =>
  | True =>
    error = TokenOwnerError;
    Throw error
  end
end

procedure ZRC2TransferFrom(payment_token_address: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
  msg_to_zrc2 = {
    _tag: "TransferFrom";
    _recipient: payment_token_address;
    _amount: Uint128 0;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_to_zrc2;
  send msgs
end

procedure ZRC6TransferFrom(
  token_address: ByStr20,
  to: ByStr20,
  token_id: Uint256)
  msg_to_zrc6 = {
    _tag: "TransferFrom";
    _recipient: token_address;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg msg_to_zrc6;
  send msgs
end

procedure SendZilIfNotZero(recipient : ByStr20, amount : Uint128)
  is_zero = builtin eq amount zero_uint128;
  match is_zero with
  | False => 
    msg = {
      _tag: "AddFunds";
      _recipient: recipient;
      _amount: amount
    };
    msg = one_msg msg;
    send msg
  | True => (* do not send zero amounts *)
  end
end

procedure HandleFulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  buyer: ByStr20,
  seller: ByStr20,
  side: Uint32,
  buy_dest: ByStr20
  )
  
  (* Assume this marketplace support royalty *)
  royalty_fee_bps <- & token_address.royalty_fee_bps;
  RequireValidRoyaltyFeeBPS royalty_fee_bps;
  royalty_amount = portion sale_price royalty_fee_bps;

  (* Calculating the Service Fee *)
  is_state <- &state as ByStr20 with contract
    field service_fee_bps: Uint128,
    field collection_address: ByStr20,
    field service_fee_recipient: ByStr20
  end;

  match is_state with
  | Some some_value =>
    fee_bps <- &some_value.service_fee_bps;
    svc_fee = portion sale_price fee_bps;
    collections_contract_ <- &some_value.collection_address;
    is_zero_address = builtin eq zero_address collections_contract_;
    match is_zero_address with
    | True =>
      error = InvalidCollectionAddress;
      Throw error
    | False =>
      maybe_collections_contract_ <- & collections_contract_ as ByStr20 with contract
        field token_collection: Map ByStr20 (Map Uint256 Uint32),
        field collection_owning_brand: Map Uint32 ByStr20,
        field has_had_first_sale: Map ByStr20 (Map Uint256 Bool),
        field collection_commission_fee: Map Uint32 Uint128
      end;
      match maybe_collections_contract_ with 
      | None => 
        error = InvalidCollectionAddress;
        Throw error
      | Some collections_contract => 
        opt_collection_id <- & collections_contract.token_collection[token_address][token_id];
        collection_id = option_uint32 zero_uint32 opt_collection_id;
        commission_fee_bps <- & collections_contract.collection_commission_fee[collection_id];
        has_had_first_sale <- & exists collections_contract.has_had_first_sale[token_address][token_id];
        
        brand_commission_fee = compute_commission_fee sale_price commission_fee_bps has_had_first_sale;
        is_commission_fee = uint128_gt brand_commission_fee zero_uint128;
      
        (* The brand recipient to pay commission to *)
        opt_brand_recipient <- & collections_contract.collection_owning_brand[collection_id];
        brand_recipient = option_address zero_address opt_brand_recipient;
      
        profit = builtin sub sale_price royalty_amount;
        profit_after_commission = builtin sub profit brand_commission_fee;
        seller_profit = builtin sub profit_after_commission svc_fee;
      
        royalty_recipient <- & token_address.royalty_recipient;
        RequireAllowedUser royalty_recipient;
      
        svc_fee_recipient <- &some_value.service_fee_recipient;
        RequireAllowedUser svc_fee_recipient;
      
        (* The currency is ZIL if the payment_token_address is zero address *)
        is_native_zil = builtin eq payment_token_address zero_address;
        match is_native_zil with
        | True =>
          msg_to_royalty_recipient = {
            _tag: "AddFunds";
            _recipient: royalty_recipient;
            _amount: royalty_amount
          };
      
          msg_to_svc_fee_recipient = {
            _tag: "AddFunds";
            _recipient: svc_fee_recipient;
            _amount: svc_fee
          };
          
          msg_to_seller = {
            _tag: "AddFunds";
            _recipient: seller;
            _amount: seller_profit
          };
          
          msgs1 = three_msgs msg_to_royalty_recipient msg_to_svc_fee_recipient msg_to_seller;
          send msgs1;
          
          (* Paying out a commission if there is one *)
          match is_commission_fee with
          | True =>
            SendZilIfNotZero brand_recipient brand_commission_fee;
      
            msg_to_collection_contract = {
              _tag: "TokenSaleCallback";
              _recipient: collections_contract; 
              _amount: zero_uint128;
              token_address: token_address;
              token_id: token_id;
              collection_id: collection_id;
              commission_fee: brand_commission_fee
            };
            msgs2 = one_msg msg_to_collection_contract;
            send msgs2
      
          | False => (* No operation *)
          end
      
        | False =>
          (* marketplace is the spender for both ZRC2 and ZRC6 tokens *)
      
          (* On behalf of buyer, marketplace transfers royalty fee to the royalty_recipient *)
          (* ZRC2TransferFrom payment_token_address buyer royalty_recipient royalty_amount;*)
          msg_to_zrc2_royalty_fee = {
            _tag: "ZRC2TransferFrom";
            _recipient: transfer_proxy;
            _amount: Uint128 0;
            token_address: payment_token_address;
            from: buyer;
            to: royalty_recipient;
            amount: royalty_amount
          };
          msgs1 = one_msg msg_to_zrc2_royalty_fee;
          send msgs1;
      
          (* On behalf of buyer, marketplace transfers service fee to this marketplace owner *)
          (* ZRC2TransferFrom payment_token_address buyer svc_fee_recipient svc_fee; *)
          msg_to_zrc2_svc_fee = {
            _tag: "ZRC2TransferFrom";
            _recipient: transfer_proxy;
            _amount: Uint128 0;
            token_address: payment_token_address;
            from: buyer;
            to: svc_fee_recipient;
            amount: svc_fee
          };
          msgs2 = one_msg msg_to_zrc2_svc_fee;
          send msgs2;
      
          (* On behalf of buyer, marketplace transfers the seller_profit to seller *)
          (* ZRC2TransferFrom payment_token_address buyer seller seller_profit; *)
          msg_to_zrc2_seller_profit = {
            _tag: "ZRC2TransferFrom";
            _recipient: transfer_proxy;
            _amount: Uint128 0;
            token_address: payment_token_address;
            from: buyer;
            to: seller;
            amount: seller_profit
          };
          msgs3 = one_msg msg_to_zrc2_seller_profit;
          send msgs3;
      
          (* Paying out a commission if there is one *)
          match is_commission_fee with
            | False => (* No Operation *)
            | True => 
            (* ZRC2TransferFrom payment_token_address buyer brand_recipient brand_commission_fee; *)
              msg_to_brand_commission = {
                _tag: "ZRC2TransferFrom";
                _recipient: transfer_proxy;
                _amount: Uint128 0;
                token_address: payment_token_address;
                from: buyer;
                to: brand_recipient;
                amount: brand_commission_fee
              };
              msgs4 = one_msg msg_to_brand_commission;
              send msgs4;
      
              msg_to_collection_contract = {
                _tag: "TokenSaleCallback";
                _recipient: collections_contract; 
                _amount: zero_uint128;
                token_address: token_address;
                token_id: token_id;
                collection_id: collection_id;
                commission_fee: brand_commission_fee
              };
              msgs5 = one_msg msg_to_collection_contract;
              send msgs5
          end
        end;
      
      
        (* On behalf of seller, marketplace transfers the zrc6 token to buy_dest *)
        (* ZRC6TransferFrom token_address buy_dest token_id; *)
        msg_to_brand_commission = {
          _tag: "ZRC6TransferFrom";
          _recipient: transfer_proxy;
          _amount: Uint128 0;
          token_address: token_address;
          to: buy_dest;
          token_id: token_id
        };
        msgs6 = one_msg msg_to_brand_commission;
        send msgs6;
      
        e = {
          _eventname : "FulfillOrder";
          taker: _origin;
          side: side;
          token_address: token_address;
          token_id: token_id;
          payment_token_address: payment_token_address;
          sale_price: sale_price;
          seller: seller;
          buyer: buyer;
          asset_recipient: buy_dest;
          payment_tokens_recipient: seller;
          royalty_recipient: royalty_recipient;
          royalty_amount: royalty_amount;
          service_fee: svc_fee
        };
        event e
      end
    end
  | None =>
    error = InvalidStateContractError2;
    Throw error
  end
end

procedure Cancel(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
  )

  is_valid_ <- &state as ByStr20 with contract
    field sell_side: Uint32,
    field sell_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))),
    field buy_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))
  end;

  match is_valid_ with
  | Some some_value =>
    sell_side_ <- &some_value.sell_side;
    is_sell_order = builtin eq side sell_side_;
      match is_sell_order with 
      | True =>     
        (* Side: Sell *)
        maybe_sell_order <- &some_value.sell_orders[token_address][token_id][payment_token_address][sale_price];
        match maybe_sell_order with
        | None =>
          error = SellOrderNotFoundError;
          Throw error
        | Some (Order maker expiration_bnum) =>  
          (* sender must be the maker or the contract owner *)
          RequireAccessToCancel maker;
          (* Remove order *)

          e = {
            _eventname : "CancelOrder";
            maker: maker;
            side: sell_side_;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price
          };
          event e;

          msg_to_cancel = {
            _tag: "CancelOrder";
            _recipient: state;
            _amount: Uint128 0;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            side : sell_side_;
            maker: maker
          };
          msgs = one_msg msg_to_cancel;
          send msgs
        end
      | False => 
        (* Side: Buy *)
        maybe_buy_order <- &some_value.buy_orders[token_address][token_id][payment_token_address][sale_price];
        match maybe_buy_order with
        | None =>
          error = BuyOrderNotFoundError;
          Throw error
        | Some (Order maker expiration_bnum) =>  
          (* sender must be the maker or the contract owner *)
          RequireAccessToCancel maker;

          (* The currency is ZIL if the payment_token_address is zero address *)
          is_native_zil = builtin eq payment_token_address zero_address;
          match is_native_zil with
            | False =>
              msg_to_send_zrc2 = {
                _tag: "ZRC2TransferFrom";
                _recipient: transfer_proxy;
                _amount: Uint128 0;
                token_address: payment_token_address;
                from: maker;
                to: transfer_proxy;
                amount: sale_price
              };
              msgs = one_msg msg_to_send_zrc2;
              send msgs
            | True =>
              msg = {
                _tag: "AddFunds";
                _recipient: maker;
                _amount: sale_price
              };
              msgs = one_msg msg;
              send msgs
          end;
          
          (* Remove order *)
          e = {
            _eventname : "CancelOrder";
            maker: maker;
            side: sell_side_;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price
          };
          event e;

          msg_to_cancel = {
            _tag: "CancelOrder";
            _recipient: state;
            _amount: Uint128 0;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            side : sell_side_;
            maker: maker
          };
          msgs = one_msg msg_to_cancel;
          send msgs
        end
      end
  | None => 
    error = InvalidSellSideError;
    Throw error
  end
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
procedure DoSetOrder(order: OrderParam)
  match order with
  | OrderParam token_address token_id payment_token_address sale_price side expiration_bnum =>
    RequireNotExpired expiration_bnum;
    RequireAllowedPaymentToken payment_token_address;
    RequireThisToBeSpender token_address token_id;
    RequireValidTotalFees token_address token_id;

    maybe_state_contract_ <- & state as ByStr20 with contract 
      field sell_side : Uint32
    end;

    match maybe_state_contract_ with
    | None => 
      error = InvalidStateContractError3;
      Throw error
    | Some state_contract =>
      sell_side_ <- & state_contract.sell_side;
      is_sell_order = builtin eq side sell_side_;    
      match is_sell_order with 
      | True => 
        (* Side: Sell *)
        (* Only the token owner can create sell orders *)
        RequireSenderToBeTokenOwner token_address token_id;
        
        (* set new sell order *)
        (* new_order = Order _sender expiration_bnum;*)
        (* sell_orders[token_address][token_id][payment_token_address][sale_price] := new_order;*)
        
        msg_to_set_sellorder = {
          _tag: "SetOrder";
          _recipient: state;
          _amount: Uint128 0;
          side: side;
          token_address: token_address;
          token_id: token_id;
          payment_token_address: payment_token_address;
          sale_price: sale_price;
          sender: _origin;
          expiration_bnum: expiration_bnum
        };
        msgs = one_msg msg_to_set_sellorder;
        send msgs;
        
        e = {
          _eventname : "SetOrder";
          maker: _origin;
          side: side;
          token_address: token_address;
          token_id: token_id;
          payment_token_address: payment_token_address;
          sale_price: sale_price;
          expiration_bnum: expiration_bnum
        };
        event e
      | False => 
        (* Side: Buy *)
        (* The token owner must not be able to create buy orders *)
        RequireSenderNotToBeTokenOwner token_address token_id;

        (* The currency is ZIL if the payment_token_address is zero address *)
        is_native_zil = builtin eq payment_token_address zero_address;

        maybe_state_contract_buy_orders <- & state as ByStr20 with contract
          field buy_orders : Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))
        end;

        match maybe_state_contract_buy_orders with
        | None =>
        | Some some_buy_orders =>
          maybe_buy_order <- & some_buy_orders.buy_orders[token_address][token_id][payment_token_address][sale_price];
          (* maybe_buy_order <- & state_contract.buy_orders[token_address][token_id][payment_token_address][sale_price]; *)
            match maybe_buy_order with 
            | None =>
              (* create a buy order *)
              match is_native_zil with 
              | False =>
                msg_to_send_zrc2 = {
                  _tag: "ZRC2TransferFrom";
                  _recipient: transfer_proxy;
                  _amount: Uint128 0;
                  token_address: payment_token_address;
                  from: _origin;
                  to: transfer_proxy;
                  amount: sale_price
                };
                msgs = one_msg msg_to_send_zrc2;
                send msgs
              | True => 
                (* _amount must be equal to sale_price *)
                RequireEqualZILAmount sale_price;
                (* ZILs must be accepted only if a buy order is newly created *)
                (* accept*)
                msg = {
                  _tag: "AddFunds";
                  _recipient: transfer_proxy;
                  _amount: sale_price
                };
                msgs = one_msg msg;
                send msgs
              end
            | Some (Order buyer _) => 
              (* update the buy order *)
              RequireSelf buyer
          end;

          (* set new buy order *)
          (* new_order = Order _sender expiration_bnum;*)
          (* buy_orders[token_address][token_id][payment_token_address][sale_price] := new_order;*)
          
          msg_to_set_buyorder = {
            _tag: "SetOrder";
            _recipient: state;
            _amount: Uint128 0;
            side: side;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            sender: _origin;
            expiration_bnum: expiration_bnum
          };
          msgs = one_msg msg_to_set_buyorder;
          send msgs;

          e = {
            _eventname : "SetOrder";
            maker: _origin;
            side: side;
            token_address: token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            expiration_bnum: expiration_bnum
          };
          event e
        end
      end
    end
  end
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
transition SetOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address:ByStr20,
  sale_price: Uint128,
  side: Uint32,
  expiration_bnum: BNum
)
  RequireNotPaused;
  RequireNonZeroAddress proxy;
  RequireNonZeroAddress state;
  RequireNonZeroAddress transfer_proxy;
  RequireAllowedUser _origin;
  order = OrderParam token_address token_id payment_token_address sale_price side expiration_bnum;
  DoSetOrder order
end

(* Fulfills orders *)
transition FulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32,
  (* `dest` enables buyers to set an address to receive the asset when fulfilling a sell order. *)
  (* `dest` is only meaningful for buyers at the moment *)
  dest: ByStr20
  )
  RequireNotPaused;
  RequireNonZeroAddress proxy;
  RequireNonZeroAddress state;
  RequireNonZeroAddress transfer_proxy;
  RequireAllowedUser _origin;
  RequireAllowedUser dest;
  RequireValidDestination dest;
  
  is_valid_ <- &state as ByStr20 with contract
    field sell_side: Uint32,
    field sell_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))),
    field buy_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))
  end;
  
  match is_valid_ with
    | Some some_value =>
      sell_side_ <- &some_value.sell_side;
      is_sell_order = builtin eq side sell_side_;
      match is_sell_order with 
      | True => 
        (* Side: Sell *)
        (* - Buyers can fulfill sell orders. *)
        buyer = _origin;
        maybe_sell_order <- &some_value.sell_orders[token_address][token_id][payment_token_address][sale_price];
    
        match maybe_sell_order with
        | None => 
          error = SellOrderNotFoundError;
          Throw error
        | Some (Order seller expiration_bnum) =>  
          RequireNotExpired expiration_bnum;
          (* Sender must not be the seller *)
          RequireNotSelf seller;
          
          (* The currency is ZIL if the payment_token_address is zero address *)
          is_native_zil = builtin eq payment_token_address zero_address;
          match is_native_zil with
          | False => 
            (* untested *)
            msg_to_send_zrc2 = {
              _tag: "ZRC2TransferFrom";
              _recipient: transfer_proxy;
              _amount: Uint128 0;
              token_address: payment_token_address;
              from: _origin;
              to: seller;
              amount: sale_price
            };
            msgs = one_msg msg_to_send_zrc2;
            send msgs
          | True => 
            (* _amount must be equal to sale_price *)
            RequireEqualZILAmount sale_price;
            (* ZILs must be accepted only if a sell order is fulfilled *)
            (* accept - untested*)
            msg = {
              _tag: "AddFunds";
              _recipient: seller;
              _amount: sale_price
            };
            msgs = one_msg msg;
            send msgs
          end;
    
          HandleFulfillOrder token_address token_id payment_token_address sale_price buyer seller side dest;
          
          (* Remove all sell orders. *)
          (* When a sell order is fulfilled, the sell order is removed and the other sell orders for the token are also removed. *)
          
          (* Note that we should keep the buy orders for the new owner. *)
          (* The following is the reasons why the existing buy orders should not be removed: *) 
          (* a) The buyers don't have to create new buy orders every single time whenever the owner of the token has changed. *)
          (* b) The new owner can sell the token again shortly by fulfilling existing buy orders. *)
    
          (* delete sell_orders[token_address][token_id] *)

          msg_to_send_update_state = {
            _tag: "FulfillOrder";
            _recipient: state;
            _amount: Uint128 0;
            token_address: payment_token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            side: side;
            dest: dest;
            buyer: buyer;
            seller: seller
          };
          msgs = one_msg msg_to_send_update_state;
          send msgs

        end
      | False => 
        (* Side: Buy *)
        (* - Sellers can fulfill buy orders. *)
        seller = _origin;
        maybe_buy_order <- &some_value.buy_orders[token_address][token_id][payment_token_address][sale_price];
    
        match maybe_buy_order with
        | None => 
          error = BuyOrderNotFoundError;
          Throw error
        | Some (Order buyer expiration_bnum) =>  
          RequireNotExpired expiration_bnum;
          (* Sender must not be the buyer *)
          RequireNotSelf buyer;
          
          HandleFulfillOrder token_address token_id payment_token_address sale_price buyer seller side buyer;

          msg_to_send_update_state = {
            _tag: "FulfillOrder";
            _recipient: state;
            _amount: Uint128 0;
            token_address: payment_token_address;
            token_id: token_id;
            payment_token_address: payment_token_address;
            sale_price: sale_price;
            side: side;
            dest: dest;
            buyer: buyer;
            seller: seller
          };
          msgs = one_msg msg_to_send_update_state;
          send msgs
    
          (* Remove all sell orders *)
          (* delete sell_orders[token_address][token_id]; *)
          
          (* - When a buy order is fulfilled, the buy order is removed. *)
          (* Remove the buy order *)
          (* Note that we should keep other buy orders for the new owner *)
          (* delete buy_orders[token_address][token_id][payment_token_address][sale_price] *)
        end
      end
    | None => 
    error = InvalidSellSideError;
    Throw error
  end
end

(* @multi-sig *)
(* Cancels orders *)
transition CancelOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
)
  RequireProxy;
  RequireNonZeroAddress proxy;
  RequireNonZeroAddress state;
  RequireNonZeroAddress transfer_proxy;

  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _origin;
  
  match is_contract_owner with
  | True => 
    (* the contract owner can cancel orders only if this contract is paused. *)
    RequirePaused
  | False =>
    (* - the makers can cancel their orders only if this contract is not paused. *)
    RequireProxy;
    RequireNotPaused
  end;
  Cancel token_address token_id payment_token_address sale_price side
end

(* @multi-sig *)
(* Pauses the contract. Use this when things are going wrong ('circuit breaker'). *)
transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

(* @multi-sig *)
(* Unpauses the contract. *)
transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

(* @multi-sig *)
(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to;
  
  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e
end

(* @multi-sig *)
(* Sets `contract_ownership_recipient` as the contract owner. *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _origin recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _origin;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _origin
    };
    event e
  end
end