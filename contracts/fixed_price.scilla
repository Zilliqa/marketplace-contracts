(* SPDX-License-Identifier: GPL-3.0 *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils

library FixedPriceOrderbook

let zero_address = 0x0000000000000000000000000000000000000000
let zero_uint128 = Uint128 0
let false = False
let true = True

let min_bps = Uint128 1
let max_bps = Uint128 10000

let sell_side = Uint32 0
let buy_side = Uint32 1

let one_msg = 
  fun (msg : Message) => 
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
  let msgs_tmp = one_msg msg2 in
  Cons {Message} msg1 msgs_tmp

let three_msgs =
fun (msg1: Message) =>
fun (msg2: Message) =>
fun (msg3: Message) =>
  let msgs_tmp = two_msgs msg2 msg3 in
  Cons {Message} msg1 msgs_tmp

let portion = 
  fun(amount: Uint128) =>
  fun(bps: Uint128) => 
    (* To avoid integer overflow, use division only. *)
    (* amount / ( 10000 / bps ) *)
    (* bps ranges from 1 to 10000. *)
    let max_bps = Uint128 10000 in
    let x = builtin div max_bps bps in
    (* x ranges from 1 to 10000. *)
    let result = builtin div amount x in
    result

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (maybe_val: Option 'A) =>
    match maybe_val with
    | Some v => v
    | None => default
    end

let option_address = @option_value ByStr20

(* maker, expiration block number *)
type Order = 
| Order of ByStr20 BNum

(* Error exceptions *)
type Error =
  | NotContractOwnerError
  | NotPausedError
  | PausedError
  | ZeroAddressDestinationError
  | ThisAddressDestinationError
  | SellOrderNotFoundError
  | BuyOrderNotFoundError
  | NotSpenderError
  | NotTokenOwnerError
  | ExpiredError
  | NotMakerError
  | NotAllowedToCancelOrder
  | SelfError
  | NotAllowedPaymentToken
  | InvalidBPSError
  | NotEqualAmountError
  | NotContractOwnershipRecipientError
  | NotAllowedUserError
  
let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | NotContractOwnerError              => Int32 -1
      | NotPausedError                     => Int32 -2
      | PausedError                        => Int32 -3
      | ZeroAddressDestinationError        => Int32 -4
      | ThisAddressDestinationError        => Int32 -5
      | SellOrderNotFoundError             => Int32 -6
      | BuyOrderNotFoundError              => Int32 -7
      | NotSpenderError                    => Int32 -8
      | NotTokenOwnerError                 => Int32 -9
      | ExpiredError                       => Int32 -10
      | NotMakerError                      => Int32 -11
      | NotAllowedToCancelOrder            => Int32 -12
      | SelfError                          => Int32 -13
      | NotAllowedPaymentToken             => Int32 -14
      | InvalidBPSError                    => Int32 -15
      | NotEqualAmountError                => Int32 -16
      | NotContractOwnershipRecipientError => Int32 -17
      | NotAllowedUserError                => Int32 -18
      end
    in
    { _exception : "Error"; code : result_code }

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FixedPriceOrderbook
(
  initial_contract_owner: ByStr20
)

(* 
  A composite primary key of a sell order or buy order consists of
  - asset contract address (ZRC-6)
  - token ID
  - payment token contract address (ZRC-2)
  - sale price
*)

(* Allowlist Contract Address *)
(* Defaults to `zero_address` *)
field allowlist_address: ByStr20 = zero_address

(* Contract Owner *)
(* Defaults to `initial_contract_owner` *)
field contract_owner: ByStr20 = initial_contract_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

(* Emergency stop mechanism *)
(* Defaults to False *)
field is_paused: Bool = false

(* token_address -> ( token_id -> ( payment_token_address -> (sale_price -> sell_order  ) ) *)
field sell_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))) = Emp ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))

(* token_address -> ( token_id -> ( payment_token_address -> (sale_price -> buy_order ) ) *)
field buy_orders: Map ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order))) = Emp ByStr20 (Map Uint256 (Map ByStr20 (Map Uint128 Order)))

(* There must be an allowlist for the payment tokens (ZRC-2) *)
field allowed_payment_tokens: Map ByStr20 Bool = Emp ByStr20 Bool

(* service fee BPS (e.g. 250 = 2.5% *)
(* A marketplace may take service fee (x% of every transaction) and use basis points (BPS) for the fee.  *)
(* `service_fee_bps` must range from `1` to `10000`. *)
(* Defaults to 250 *)
field service_fee_bps: Uint128 = Uint128 250

field service_fee_recipient: ByStr20 = initial_contract_owner

(* Procedures *)
procedure Throw(error : Error)
  e = make_error error;
  throw e
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwnerError;
    Throw error
  end
end

procedure RequireNotPaused()
  (* Reference: *)
  (* https://consensys.github.io/smart-contract-best-practices/general_philosophy/#prepare-for-failure *)
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  (* Reference: *)
  (* https://consensys.github.io/smart-contract-best-practices/general_philosophy/#prepare-for-failure *)
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end

procedure RequireValidDestination(to: ByStr20)
  (* Reference: https://github.com/ConsenSys/smart-contract-best-practices/blob/master/docs/tokens.md *)
  is_zero_address = builtin eq to zero_address;
  match is_zero_address with
  | False =>
  | True =>
    error = ZeroAddressDestinationError;
    Throw error
  end;

  is_this_address = builtin eq to _this_address;
  match is_this_address with
  | False =>
  | True =>
    error = ThisAddressDestinationError;
    Throw error
  end
end

procedure RequireValidBPS(val_bps: Uint128)
  is_gte_min = uint128_ge val_bps min_bps;
  is_lte_max = uint128_le val_bps max_bps;
  
  is_valid = andb is_gte_min is_lte_max;
  match is_valid with 
    | True => 
    | False =>
      error = InvalidBPSError;
      Throw error
  end
end

procedure RequireAllowedPaymentToken(payment_token_address: ByStr20)
  is_zero_address = builtin eq payment_token_address zero_address;
  is_allowed_zrc2_address <- exists allowed_payment_tokens[payment_token_address];

  is_allowed = orb is_zero_address is_allowed_zrc2_address;
  match is_allowed with
  | True =>
  | False =>
    error = NotAllowedPaymentToken;
    Throw error
  end
end

procedure RequireEqualZILAmount(amount: Uint128)
  is_eq = builtin eq amount _amount;
  match is_eq with
  | True =>
  | False =>
    error = NotEqualAmountError;
    Throw error
  end
end

procedure RequireAccessToCancel(maker_address: ByStr20)
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  is_maker = builtin eq maker_address _sender;

  is_allowed_to_cancel_order = orb is_maker is_contract_owner;
  match is_allowed_to_cancel_order with
  | True =>
  | False =>
    error = NotAllowedToCancelOrder;
    Throw error
  end
end

procedure RequireNotSelf(address: ByStr20)
  is_self = builtin eq address _sender;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireNotExpired(expiration_bnum: BNum)
  cur_bnum <- & BLOCKNUMBER;  
  is_not_expired = builtin blt cur_bnum expiration_bnum;
  match is_not_expired with
  | True =>
  | False =>
    error = ExpiredError;
    Throw error
  end
end

procedure RequireAllowedUser(address: ByStr20)
  allowlist <- allowlist_address;
  is_zero_address = builtin eq zero_address allowlist;
  match is_zero_address with
  | True =>
    (* Noop *)
    (* This contract doesn't use allowlist *)
  | False =>
    maybe_allowlist_contract_address <- & allowlist as ByStr20 with contract field allowed_addresses: Map ByStr20 Bool end;
    match maybe_allowlist_contract_address with 
    | None => 
    | Some contract_address =>
      maybe_allowed_address <- & contract_address.allowed_addresses[address];
      match maybe_allowed_address with
      | Some _ =>
        (* Noop *)
        (* The address is allowed *)
      | None =>
        error = NotAllowedUserError;
        Throw error
      end
    end
  end
end

procedure RequireThisToBeSpender(token_address: ByStr20 with contract field spenders: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_spender <- & token_address.spenders[token_id];
  spender = option_address zero_address maybe_spender;
  is_spender = builtin eq _this_address spender;
  match is_spender with
  | True =>
  | False =>
    error = NotSpenderError;
    Throw error
  end
end

procedure RequireSenderToBeTokenOwner(token_address: ByStr20 with contract field token_owners: Map Uint256 ByStr20 end, token_id: Uint256)
  maybe_token_owner <- & token_address.token_owners[token_id];
  token_owner = option_address zero_address maybe_token_owner;
  is_token_owner = builtin eq _sender token_owner;
  match is_token_owner with
  | True =>
  | False =>
    error = NotTokenOwnerError;
    Throw error
  end
end

procedure ZRC2TransferFrom(payment_token_address: ByStr20, from: ByStr20, to: ByStr20, amount: Uint128)
  msg_to_zrc2 = {
    _tag: "TransferFrom";
    _recipient: payment_token_address;
    _amount: Uint128 0;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_to_zrc2;
  send msgs
end

procedure ZRC6TransferFrom(
  token_address: ByStr20,
  to: ByStr20,
  token_id: Uint256)
  msg_to_zrc6 = {
    _tag: "TransferFrom";
    _recipient: token_address;
    _amount: Uint128 0;
    to: to;
    token_id: token_id
  };
  msgs = one_msg msg_to_zrc6;
  send msgs
end

procedure HandleFulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  buyer: ByStr20,
  seller: ByStr20,
  side: Uint32,
  buy_dest: ByStr20
  )
  
  (* Assume this marketplace support royalty *)
  royalty_fee_bps <- & token_address.royalty_fee_bps;
  royalty_amount = portion sale_price royalty_fee_bps;

  fee_bps <- service_fee_bps;
  svc_fee = portion sale_price fee_bps;

  profit = builtin sub sale_price royalty_amount;
  seller_profit = builtin sub profit svc_fee;

  royalty_recipient <- & token_address.royalty_recipient;
  RequireAllowedUser royalty_recipient;

  svc_fee_recipient <- service_fee_recipient;
  RequireAllowedUser svc_fee_recipient;

  is_native_zil = builtin eq payment_token_address zero_address;
  match is_native_zil with
  | True =>
    msg_to_royalty_recipient = {
      _tag: "AddFunds";
      _recipient: royalty_recipient;
      _amount: royalty_amount
    };

    msg_to_svc_fee_recipient = {
      _tag: "AddFunds";
      _recipient: svc_fee_recipient;
      _amount: svc_fee
    };
    
    msg_to_seller = {
      _tag: "AddFunds";
      _recipient: seller;
      _amount: seller_profit
    };
    
    msgs = three_msgs msg_to_royalty_recipient msg_to_svc_fee_recipient msg_to_seller;
    send msgs
  | False =>
    (* marketplace is the spender for both ZRC2 and ZRC6 tokens *)

    (* On behalf of buyer, marketplace transfers royalty fee to the royalty_recipient *)
    ZRC2TransferFrom payment_token_address buyer royalty_recipient royalty_amount;

    (* On behalf of buyer, marketplace transfers service fee to this marketplace owner *)
    ZRC2TransferFrom payment_token_address buyer svc_fee_recipient svc_fee;

    (* On behalf of buyer, marketplace transfers the seller_profit to seller *)
    ZRC2TransferFrom payment_token_address buyer seller seller_profit
  end;

  (* On behalf of seller, marketplace transfers the zrc6 token to buy_dest *)
  ZRC6TransferFrom token_address buy_dest token_id;

  e = {
    _eventname : "FulfillOrder";
    taker: _sender;
    side: side;
    token_address: token_address;
    token_id: token_id;
    payment_token_address: payment_token_address;
    sale_price: sale_price;
    seller: seller;
    buyer: buyer;
    asset_recipient: buy_dest;
    payment_tokens_recipient: seller;
    royalty_recipient: royalty_recipient;
    royalty_amount: royalty_amount;
    service_fee: svc_fee
  };
  event e
end

procedure Cancel(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
  )
  is_sell_order = builtin eq side sell_side;
  match is_sell_order with 
  | True =>     
    (* Side: Sell *)
    maybe_sell_order <- sell_orders[token_address][token_id][payment_token_address][sale_price];
    match maybe_sell_order with
    | None =>
      error = SellOrderNotFoundError;
      Throw error
    | Some (Order maker expiration_bnum) =>  
      (* sender must be the maker or the contract owner *)
      RequireAccessToCancel maker;
      (* Remove order *)
      delete sell_orders[token_address][token_id][payment_token_address][sale_price];
      
      e = {
        _eventname : "CancelOrder";
        maker: maker;
        side: side;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price
      };
      event e
    end
  | False => 
    (* Side: Buy *)
    maybe_buy_order <- buy_orders[token_address][token_id][payment_token_address][sale_price];
    match maybe_buy_order with
    | None =>
      error = BuyOrderNotFoundError;
      Throw error
    | Some (Order maker expiration_bnum) =>  
      (* sender must be the maker or the contract owner *)
      RequireAccessToCancel maker;

      is_native_zil = builtin eq payment_token_address zero_address;
      match is_native_zil with
        | False =>
        | True =>
          msg = {
            _tag: "AddFunds";
            _recipient: maker;
            _amount: sale_price
          };
          msgs = one_msg msg;
          send msgs
      end;
      
      (* Remove order *)
      delete buy_orders[token_address][token_id][payment_token_address][sale_price];

      e = {
        _eventname : "CancelOrder";
        maker: maker;
        side: side;
        token_address: token_address;
        token_id: token_id;
        payment_token_address: payment_token_address;
        sale_price: sale_price
      };
      event e
    end
  end
end

(* Sets sell and buy orders. *)
(* - Sellers can set sell orders (listings) *)
(* - Buyers can set buy orders (offers) *)
transition SetOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32,
  expiration_bnum: BNum
  )
  RequireNotPaused;
  RequireAllowedUser _sender;
  RequireNotExpired expiration_bnum;
  RequireAllowedPaymentToken payment_token_address;
  RequireThisToBeSpender token_address token_id;

  is_sell_order = builtin eq side sell_side;
  match is_sell_order with 
  | True => 
    (* Side: Sell *)
    RequireSenderToBeTokenOwner token_address token_id;
    
    (* set new sell order *)
    new_order = Order _sender expiration_bnum;
    sell_orders[token_address][token_id][payment_token_address][sale_price] := new_order;
    
    e = {
      _eventname : "SetOrder";
      maker: _sender;
      side: side;
      token_address: token_address;
      token_id: token_id;
      payment_token_address: payment_token_address;
      sale_price: sale_price;
      expiration_bnum: expiration_bnum
    };
    event e
  | False => 
    (* Side: Buy *)

    (* set new buy order *)
    new_order = Order _sender expiration_bnum;

    (* It's native ZIL case if the payment_token_address is zero address and sale_price is 0 *)
    is_native_zil = builtin eq payment_token_address zero_address;
    match is_native_zil with 
      | False =>
      | True => 
        RequireEqualZILAmount sale_price;
        accept
    end;

    amount = 
      match is_native_zil with 
        | True => _amount
        | False =>  sale_price
      end;

    buy_orders[token_address][token_id][payment_token_address][amount] := new_order;

    e = {
      _eventname : "SetOrder";
      maker: _sender;
      side: side;
      token_address: token_address;
      token_id: token_id;
      payment_token_address: payment_token_address;
      sale_price: amount;
      expiration_bnum: expiration_bnum
    };
    event e
  end
end

(* Fulfills orders *)
transition FulfillOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32,
  (* `dest` enables buyers to set an address to receive the asset when fulfilling a sell order. *)
  (* `dest` is only meaningful for buyers at the moment *)
  dest: ByStr20
  )
  RequireNotPaused;
  RequireAllowedUser _sender;
  RequireAllowedUser dest;
  
  is_sell_order = builtin eq side sell_side;
  match is_sell_order with 
  | True => 
    (* Side: Sell *)
    (* - Buyers can fulfill sell orders. *)
    buyer = _sender;
    maybe_sell_order <- sell_orders[token_address][token_id][payment_token_address][sale_price];

    match maybe_sell_order with
    | None => 
      error = SellOrderNotFoundError;
      Throw error
    | Some (Order seller expiration_bnum) =>  
      RequireNotExpired expiration_bnum;
      (* Sender must not be the seller *)
      RequireNotSelf seller;
      
      is_native_zil = builtin eq payment_token_address zero_address;
      match is_native_zil with
      | False => 
      | True => 
        RequireEqualZILAmount sale_price;
        accept
      end;
      
      HandleFulfillOrder token_address token_id payment_token_address sale_price buyer seller side dest;
      
      (* Remove all sell orders *)
      (* When a sell order is fulfilled, the sell order is removed and the other sell orders for the token are also removed. *)
      (* Note that we should keep the buy orders for the new owner *)
      delete sell_orders[token_address][token_id]
    end
  | False => 
    (* Side: Buy *)
    (* - Sellers can fulfill buy orders. *)
    seller = _sender;
    maybe_buy_order <- buy_orders[token_address][token_id][payment_token_address][sale_price];

    match maybe_buy_order with
    | None => 
      error = BuyOrderNotFoundError;
      Throw error
    | Some (Order buyer expiration_bnum) =>  
      RequireNotExpired expiration_bnum;
      (* Sender must not be the buyer *)
      RequireNotSelf buyer;
      
      HandleFulfillOrder token_address token_id payment_token_address sale_price buyer seller side buyer;

      (* Remove all sell orders *)
      delete sell_orders[token_address][token_id];
      
      (* - When a buy order is fulfilled, the buy order is removed. *)
      (* Remove the buy order *)
      (* Note that we should keep other buy orders for the new owner *)
      delete buy_orders[token_address][token_id][payment_token_address][sale_price]
    end
  end
end

(* Cancels orders *)
transition CancelOrder(
  token_address: ByStr20 with contract 
    field royalty_recipient: ByStr20, 
    field royalty_fee_bps: Uint128, 
    field spenders: Map Uint256 ByStr20, 
    field token_owners: Map Uint256 ByStr20 
  end,
  token_id: Uint256,
  payment_token_address: ByStr20,
  sale_price: Uint128,
  side: Uint32
)
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  
  match is_contract_owner with
  | True => 
    (* the contract owner can cancel orders only if this contract is paused. *)
    RequirePaused
  | False =>
    (* - the makers can cancel their orders only if this contract is not paused. *)
    RequireNotPaused
  end;

  Cancel token_address token_id payment_token_address sale_price side
end

(* Pauses the contract. Use this when things are going wrong ('circuit breaker'). *)
transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

(* Unpauses the contract. *)
transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

transition AllowPaymentTokenAddress(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  RequireContractOwner;
  allowed_payment_tokens[address] := true;
  e = {
    _eventname : "AllowPaymentTokenAddress";
    payment_token_addresss: address
  };
  event e
end

transition DisallowPaymentTokenAddress(
  address: ByStr20 with contract 
    field allowances: Map ByStr20 (Map ByStr20 Uint128)
  end
)
  RequireContractOwner;
  delete allowed_payment_tokens[address];
  e = {
    _eventname : "DisallowPaymentTokenAddress";
    payment_token_addresss: address
  };
  event e
end

transition SetServiceFeeBPS(fee_bps: Uint128)
  RequireContractOwner;
  RequireValidBPS fee_bps;
  service_fee_bps := fee_bps;
  e = {
    _eventname : "SetServiceFeeBPS";
    service_fee_bps: fee_bps
  };
  event e
end

transition SetServiceFeeRecipient(to: ByStr20)
  RequireContractOwner;
  RequireValidDestination to;
  
  service_fee_recipient := to;
  
  e = { 
    _eventname: "SetServiceFeeRecipient";
    to: to
  };
  event e
end

transition SetAllowlist(address: ByStr20)
  RequireContractOwner;
  allowlist_address := address;
  
  e = { 
    _eventname: "SetAllowlist";
    address: address
  };
  event e
end

(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to;
  
  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e
end

(* Sets `contract_ownership_recipient` as the contract owner. *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipientError;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e
  end
end

(* empty callbacks *)
transition ZRC6_TransferFromCallback(from:ByStr20, to: ByStr20, token_id: Uint256)
end
transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
