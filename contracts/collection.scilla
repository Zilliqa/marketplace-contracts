(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils PairUtils
library Collections

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True
let zero = Uint256 0
let one = Uint256 1
let uint32_one = Uint32 1
let empty_string = ""

let max_commission_fee_bps = Uint128 250

(* Error exception *)
type Error =
  | TokenAlreadyInCollection
  | TokenIdDoesNotExist
  | TokenDoesNotExistInCollection
  | SenderIsNotTokenOwner
  | AddToCollectionRequestNeverIssued
  | CommissionFeeTooHigh
  | RequestDoesNotExist
  | SenderIsNotBrandOwner
  | CollectionIdDoesNotExist

let make_error =
  fun (result: Error) =>
    let result_code = 
      match result with
      | TokenAlreadyInCollection                     => Int32 -1
      | TokenIdDoesNotExist                          => Int32 -2
      | TokenDoesNotExistInCollection                => Int32 -3
      | SenderIsNotTokenOwner                        => Int32 -4
      | AddToCollectionRequestNeverIssued            => Int32 -5
      | CommissionFeeTooHigh                         => Int32 -6
      | RequestDoesNotExist                          => Int32 -7
      | SenderIsNotBrandOwner                        => Int32 -8
      | CollectionIdDoesNotExist                     => Int32 -9
      end
    in
    { _exception: "Error"; code: result_code }



type TokenState = 
    | Requested of Uint32 (* collection_id *)

contract Collections
(
  initial_contract_owner: ByStr20
)

(* Mapping from collection_id to a brand_owner (address) *)
field collection_owning_brand: Map Uint32 ByStr20 = Emp Uint32 ByStr20
field collection_owning_brand_size: Uint32 = Uint32 0

(* Mapping from token ID to a collection *)
field token_collection: Map ByStr20 (Map Uint256 Uint32) = Emp ByStr20 (Map Uint256 Uint32)

(* Mapping from token_address to token_id:brand_address *)
field requests: Map ByStr20 (Map Uint256 (Map ByStr20 TokenState)) = Emp ByStr20 (Map Uint256 (Map ByStr20 TokenState))

(* Mapping from collection_id to collection_fee *)
field collection_commission_fee: Map Uint32 Uint128 = Emp Uint32 Uint128

(* Mapping for knowing if an NFT has been sold or not *)
field has_had_first_sale: Map ByStr20 (Map Uint256 Bool) = Emp ByStr20 (Map Uint256 Bool)


(* Emit Errors *)
procedure Throw(error: Error)
  e = make_error error;
  throw e
end

procedure RequireTokenOwner(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256
    )
    owner <- & token_address.token_owners[token_id];

    match owner with
        | Some owner =>
        owner_is_sender = builtin eq owner _sender;
            match owner_is_sender with
            | True => (* No operation *)
            | False =>
                error = SenderIsNotTokenOwner;
                Throw error
            end
        | None =>
        error = TokenIdDoesNotExist;
        Throw error
    end
end

procedure RequireTokenNotInCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256
    )
    is_token_in_collection <- exists token_collection[token_address][token_id];

    match is_token_in_collection with 
    | True => 
        (* A token can ONLY belong to ONE collection - TokenAlreadyInCollection *)
        error = TokenAlreadyInCollection;
        Throw error
    | False => (* No Operation *)
    end 
end

procedure RequireBrandOwner(
    collection_id: Uint32
    )
    owner <- collection_owning_brand[collection_id];

    match owner with
        | Some owner =>
        owner_is_sender = builtin eq owner _sender;
            match owner_is_sender with
            | True => (* No operation *)
            | False =>
                error = SenderIsNotBrandOwner;
                Throw error
            end
        | None =>
        error = CollectionIdDoesNotExist;
        Throw error
    end
end

(* We allow a max upper boundary of 250 basis points (2.5%) *)
(* Any more than that will result in a failed transaction *)
procedure RequireValidBPS(val_bps: Uint128)
    is_lte_max = uint128_le val_bps max_commission_fee_bps;
    match is_lte_max with
        | True => (* No Operation *)
        | False =>
        error = CommissionFeeTooHigh;
        Throw error
    end
end


(* Lets anyone create an empty collection with an id assigned by the smart contract *)
(* @dev should integrate with allowlist to only allow whitelisted addresses *)
transition CreateCollection(
    commission_fee: Uint128
    )
    RequireValidBPS commission_fee;
    (* Placeholder for requiring only whitelisted brands *)
    (* RequireValidBrand; *)
    
    size <- collection_owning_brand_size;
    collection_id = builtin add size uint32_one;
    collection_owning_brand_size := collection_id;

    collection_owning_brand[collection_id] := _sender;
    collection_commission_fee[collection_id] := commission_fee;

    e = {
        _eventname : "CollectionCreated";
        collection_id: collection_id;
        brand_owner: _sender;
        commission_fee: commission_fee
    };
    event e
end

(* Used by a brand owner to delete an NFT from a collection they own *)
transition RemoveTokenFromCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;

    maybe_collection_id <- token_collection[token_address][token_id];
    
    match maybe_collection_id with 
    | Some maybe_collection_id => 
        delete token_collection[token_address][token_id];
        e = {
            _eventname : "RemoveTokenFromCollection";
            token_address: token_address;
            token_id: token_id;
            collection_id: collection_id
          };
        event e
        
    | None =>
        error = TokenDoesNotExistInCollection;
        Throw error
    end;

    (* Deleting the corresponding record in has_had_first_sale if exist *)
    is_sale_record <- exists has_had_first_sale[token_address][token_id];

    match is_sale_record with 
    | True  =>
      delete has_had_first_sale[token_address][token_id]
    | False => (* No operation *)
    end
end


(* Used by a brand owner to request an NFT to their collection *)
transition RequestTokenToCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;
    RequireTokenNotInCollection token_address token_id;

    (* When the same brand uses this function a second time, maybe we just overwrite? *)
    request = Requested collection_id;
    requests[token_address][token_id][_sender] := request;
    commission_fee <- collection_commission_fee[collection_id];

    e = {
        _eventname : "RequestTokenToCollection";
        token_address: token_address;
        token_id: token_id;
        collection_id: collection_id;
        commission_fee: commission_fee
    };
    event e
end

(* Lets a brand owner delete a request if one exist. *)
transition DeleteRequestTokenToCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;
    
    maybe_request <- requests[token_address][token_id][_sender];
    
    match maybe_request with
      | Some maybe_request => 
      delete requests[token_address][token_id][_sender];

      e = {
        _eventname : "RequesTokenCollectionDeleted";
        token_address: token_address;
        token_id: token_id;
        collection_id: collection_id
      };
      event e

      | None => 
      error = RequestDoesNotExist;
      Throw error
    end
end

(* Used by a NFT owner to accept a request to have one of their tokens added to a collection *)
transition AcceptCollectionRequest(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    brand_address: ByStr20
    )
    RequireTokenOwner token_address token_id;

    maybe_request <- requests[token_address][token_id][brand_address];

    match maybe_request with 
    | Some (Requested collection_id) =>
        token_collection[token_address][token_id] := collection_id; 
        delete requests[token_address][token_id];

        e = {
            _eventname : "AddToCollectionRequestAccepted";
            token_address: token_address;
            token_id: token_id;
            brand_address: brand_address;
            collection_id: collection_id
          };
        event e

    | None => 
        error = AddToCollectionRequestNeverIssued;
        Throw error
    end
end

transition TokenSaleCallback(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256
    )

    (* TODO: Precondition 1: we are called by fixed_price or auction contracts *)
    
    (* TODO: Register the first sale if it never happened *)
    is_first_sale <- exists has_had_first_sale[token_address][token_id];

    match is_first_sale with
      | True => (* No Operation *)
      | False => 
        has_had_first_sale[token_address][token_id] := True
    end
end


(* allowlist required before create collection *)