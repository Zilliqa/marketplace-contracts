(* SPDX-License-Identifier: MIT *)
scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
import BoolUtils IntUtils PairUtils
library Collections

(* Global variables *)
let zero_address = 0x0000000000000000000000000000000000000000
let false = False
let true = True
let zero = Uint256 0
let one = Uint256 1
let uint32_one = Uint32 1
let empty_string = ""

(* Error exception *)
type Error =
  | TokenAlreadyInCollection
  | TokenIdDoesNotExist
  | TokenDoesNotExistInCollection
  | SenderIsNotTokenOwner
  | AddToCollectionRequestNeverIssued
  | CommissionFeeTooHigh
  | RequestDoesNotExist
  | SenderIsNotBrandOwner
  | CollectionIdDoesNotExist
  | NotContractOwner
  | InvalidMaxFeeBPS
  | NotContractOwnershipRecipient
  | SelfError
  | PausedError
  | NotPausedError

let make_error =
  fun (result: Error) =>
    let result_code = 
      match result with
      | TokenAlreadyInCollection                     => Int32 -1
      | TokenIdDoesNotExist                          => Int32 -2
      | TokenDoesNotExistInCollection                => Int32 -3
      | SenderIsNotTokenOwner                        => Int32 -4
      | AddToCollectionRequestNeverIssued            => Int32 -5
      | CommissionFeeTooHigh                         => Int32 -6
      | RequestDoesNotExist                          => Int32 -7
      | SenderIsNotBrandOwner                        => Int32 -8
      | CollectionIdDoesNotExist                     => Int32 -9
      | NotContractOwner                             => Int32 -10
      | InvalidMaxFeeBPS                             => Int32 -11
      | NotContractOwnershipRecipient                => Int32 -12
      | SelfError                                    => Int32 -13
      | PausedError                                  => Int32 -14
      | NotPausedError                               => Int32 -15
      end
    in
    { _exception: "Error"; code: result_code }



type TokenState = 
    | Requested of Uint32 (* collection_id *)

contract Collections
(
  initial_contract_owner: ByStr20
)

(* Contract Owner *)
(* Defaults to `initial_contract_owner` *)
field contract_owner: ByStr20 = initial_contract_owner

(* Contract ownership recipient *)
(* Defaults to `zero_address` *)
field contract_ownership_recipient: ByStr20 = zero_address

(* Emergency stop mechanism *)
(* Defaults to False *)
field is_paused: Bool = false

(* Mapping from collection_id to a brand_owner (address) *)
field collection_owning_brand: Map Uint32 ByStr20 = Emp Uint32 ByStr20
field collection_owning_brand_size: Uint32 = Uint32 0

(* Mapping from token_id to a collection *)
field token_collection: Map ByStr20 (Map Uint256 Uint32) = Emp ByStr20 (Map Uint256 Uint32)

(* Mapping from token_address to token_id:brand_owner (address) *)
field requests: Map ByStr20 (Map Uint256 (Map ByStr20 TokenState)) = Emp ByStr20 (Map Uint256 (Map ByStr20 TokenState))

(* Mapping from collection_id to collection_fee *)
field collection_commission_fee: Map Uint32 Uint128 = Emp Uint32 Uint128

(* Mapping for knowing if an NFT has been sold or not *)
field has_had_first_sale: Map ByStr20 (Map Uint256 Bool) = Emp ByStr20 (Map Uint256 Bool)

(* Can be updated by `contract_owner` with the transition `SetMaxCommissionFeeBPS` *)
field max_commission_fee_bps: Uint128 = Uint128 250

(* Emit Errors *)
procedure Throw(error: Error)
  e = make_error error;
  throw e
end

procedure RequireContractOwner()
  cur_owner <- contract_owner;
  is_contract_owner = builtin eq cur_owner _sender;
  match is_contract_owner with
  | True => 
  | False =>
    error = NotContractOwner;
    Throw error
  end
end

procedure RequireNotSelf(address_a: ByStr20, address_b: ByStr20)
  is_self = builtin eq address_a address_b;
  match is_self with
  | False =>
  | True =>
    error = SelfError;
    Throw error
  end
end

procedure RequireTokenOwner(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256
    )
    owner <- & token_address.token_owners[token_id];

    match owner with
        | Some owner =>
        owner_is_sender = builtin eq owner _sender;
            match owner_is_sender with
            | True => (* No operation *)
            | False =>
                error = SenderIsNotTokenOwner;
                Throw error
            end
        | None =>
        error = TokenIdDoesNotExist;
        Throw error
    end
end

procedure RequireTokenNotInCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256
    )
    is_token_in_collection <- exists token_collection[token_address][token_id];

    match is_token_in_collection with 
    | True => 
        (* A token can ONLY belong to ONE collection - TokenAlreadyInCollection *)
        error = TokenAlreadyInCollection;
        Throw error
    | False => (* No Operation *)
    end 
end

procedure RequireBrandOwner(
    collection_id: Uint32
    )
    owner <- collection_owning_brand[collection_id];

    match owner with
        | Some owner =>
        owner_is_sender = builtin eq owner _sender;
            match owner_is_sender with
            | True => (* No operation *)
            | False =>
                error = SenderIsNotBrandOwner;
                Throw error
            end
        | None =>
        error = CollectionIdDoesNotExist;
        Throw error
    end
end

(* We set a max upper boundary with the field `max_commission_fee_bps` *)
(* This is by default 250 (2.5%), but can be updated by contract owner *)
(* with the transition `SetMaxCommissionFeeBPS` *)
procedure RequireValidBPS(val_bps: Uint128)
    max_fee_bps <- max_commission_fee_bps;
    is_lte_max = uint128_le val_bps max_fee_bps;
    match is_lte_max with
        | True => (* No Operation *)
        | False =>
        error = CommissionFeeTooHigh;
        Throw error
    end
end

procedure RequireValidMaxBPS(val_bps: Uint128)
  (* max: 25% (arbitrary number) *)
  max = Uint128 2500;
  is_lte_max = uint128_le val_bps max;
  
  match is_lte_max with 
    | True => 
    | False =>
      error = InvalidMaxFeeBPS;
      Throw error
  end
end

procedure RequireNotPaused()
  (* Reference: *)
  (* https://consensys.github.io/smart-contract-best-practices/general_philosophy/#prepare-for-failure *)
  paused <- is_paused;
  match paused with
  | False =>
  | True =>
    (* Contract is paused *)
    error = PausedError;
    Throw error
  end
end

procedure RequirePaused()
  (* Reference: *)
  (* https://consensys.github.io/smart-contract-best-practices/general_philosophy/#prepare-for-failure *)
  paused <- is_paused;
  match paused with
  | True =>
  | False =>
    (* Contract is paused *)
    error = NotPausedError;
    Throw error
  end
end


(* Lets anyone create an empty collection with an id assigned by the smart contract *)
(* @dev should integrate with allowlist to only allow whitelisted addresses *)
transition CreateCollection(
    commission_fee: Uint128
    )
    RequireValidBPS commission_fee;
    RequireNotPaused;
    (* Placeholder for requiring only whitelisted brands *)
    (* RequireValidBrand; *)
    
    size <- collection_owning_brand_size;
    collection_id = builtin add size uint32_one;
    collection_owning_brand_size := collection_id;

    collection_owning_brand[collection_id] := _sender;
    collection_commission_fee[collection_id] := commission_fee;

    e = {
        _eventname : "CollectionCreated";
        collection_id: collection_id;
        brand_owner: _sender;
        commission_fee: commission_fee
    };
    event e
end

(* Used by a brand_owner to delete an NFT from a collection they own *)
transition RemoveTokenFromCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;
    RequireNotPaused;

    maybe_collection_id <- token_collection[token_address][token_id];
    
    match maybe_collection_id with 
    | Some maybe_collection_id => 
        delete token_collection[token_address][token_id];
        e = {
            _eventname : "RemovedTokenFromCollection";
            token_address: token_address;
            token_id: token_id;
            collection_id: collection_id
          };
        event e
        
    | None =>
        error = TokenDoesNotExistInCollection;
        Throw error
    end;

    (* Deleting the corresponding record in has_had_first_sale if exist *)
    is_sale_record <- exists has_had_first_sale[token_address][token_id];

    match is_sale_record with 
    | True  =>
      delete has_had_first_sale[token_address][token_id]
    | False => (* No operation *)
    end
end


(* Used by a brand_owner to request an NFT to their collection *)
transition RequestTokenToCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;
    RequireTokenNotInCollection token_address token_id;
    RequireNotPaused;

    (* When the same brand_owner uses this function a second time we just overwrite *)
    request = Requested collection_id;
    requests[token_address][token_id][_sender] := request;
    commission_fee <- collection_commission_fee[collection_id];

    e = {
        _eventname : "RequestTokenToCollection";
        token_address: token_address;
        token_id: token_id;
        collection_id: collection_id;
        commission_fee: commission_fee
    };
    event e
end

(* Lets a brand_owner delete a request if one exist. *)
transition DeleteRequestTokenToCollection(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    collection_id: Uint32
    )
    RequireBrandOwner collection_id;
    RequireNotPaused;
    
    maybe_request <- requests[token_address][token_id][_sender];
    
    match maybe_request with
      | Some maybe_request => 
      delete requests[token_address][token_id][_sender];

      e = {
        _eventname : "RequestTokenToCollectionDeleted";
        token_address: token_address;
        token_id: token_id;
        collection_id: collection_id
      };
      event e

      | None => 
      error = RequestDoesNotExist;
      Throw error
    end
end

(* Used by a NFT owner to accept a request to have one of their NFTs added to a collection *)
transition AcceptCollectionRequest(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256, 
    brand_address: ByStr20
    )
    RequireTokenOwner token_address token_id;
    RequireTokenNotInCollection token_address token_id;
    RequireNotPaused;

    maybe_request <- requests[token_address][token_id][brand_address];

    match maybe_request with 
    | Some (Requested collection_id) =>
        token_collection[token_address][token_id] := collection_id; 
        delete requests[token_address][token_id];

        e = {
            _eventname : "AddToCollectionRequestAccepted";
            token_address: token_address;
            token_id: token_id;
            brand_owner: brand_address;
            collection_id: collection_id
          };
        event e

    | None => 
        error = AddToCollectionRequestNeverIssued;
        Throw error
    end
end

(* Called by either fixed_price or auction contracts during an NFT sale *)
(* to detect if a commission_fee should be paid. Only applicable on the 1st sale of an NFT in a collection *)
transition TokenSaleCallback(
    token_address: ByStr20 with contract 
        field token_owners: Map Uint256 ByStr20 
    end,
    token_id: Uint256,
    collection_id: Uint32,
    commission_fee: Uint128
    )

    (* TODO: Precondition 1: we are called by fixed_price or auction contracts *)
    
    (* Register the first sale if it never happened *)
    is_first_sale <- exists has_had_first_sale[token_address][token_id];

    match is_first_sale with
      | True => (* No Operation *)
      | False => 
        has_had_first_sale[token_address][token_id] := true;

        e = {
            _eventname : "CommissionFeePaid";
            token_address: token_address;
            token_id: token_id;
            collection_id: collection_id;
            commission_fee: commission_fee
          };
        event e
    end
end

(* Sets `max_commission_fee_bps` *)
(* @Requirements: *)
(* - `_sender` must be the contract owner. Otherwise, it must throw `NotContractOwner` *)
(* - `new_max_commission_fee_bps` must be in the range of 0 and 2500. Otherwise, it must throw `InvalidMaxFeeBPS` *)
transition SetMaxCommissionFeeBPS(new_max_commission_fee_bps: Uint128)
  RequireContractOwner;
  RequireValidMaxBPS new_max_commission_fee_bps;

  (* Can we run into an issue where the combined fees (royalty, service & commission) result in gt 100%? *)
  old_commission_fee_bps <- max_commission_fee_bps;
  max_commission_fee_bps := new_max_commission_fee_bps;
  
  e = { 
    _eventname: "UpdatedMaxCommissionFeeBps";
    old_max_commission_fee_bps: old_commission_fee_bps;
    new_max_commission_fee_bps: new_max_commission_fee_bps
  };
  event e
end

(* @multi-sig *)
(* Sets `to` as the contract ownership recipient. *)
(* To reset `contract_ownership_recipient`, use `zero_address`. *)
(* i.e., `0x0000000000000000000000000000000000000000` *)
transition SetContractOwnershipRecipient(to: ByStr20)
  RequireContractOwner;
  RequireNotSelf to _sender;

  contract_ownership_recipient := to;

  e = {
    _eventname: "SetContractOwnershipRecipient";
    to: to
  };
  event e
end

(* @multi-sig *)
(* Sets `contract_ownership_recipient` as the contract owner. *)
transition AcceptContractOwnership()
  recipient <- contract_ownership_recipient;

  is_recipient = builtin eq _sender recipient;
  match is_recipient with
  | False =>
    error = NotContractOwnershipRecipient;
    Throw error
  | True =>
    contract_owner := _sender;
    contract_ownership_recipient := zero_address;

    e = {
      _eventname: "AcceptContractOwnership";
      contract_owner: _sender
    };
    event e
  end
end

(* @multi-sig *)
(* Pauses the contract. Use this when things are going wrong ('circuit breaker'). *)
transition Pause()
  RequireNotPaused;
  RequireContractOwner;

  is_paused := true;
  e = {
    _eventname: "Pause";
    is_paused: true
  };
  event e
end

(* @multi-sig *)
(* Unpauses the contract. *)
transition Unpause()
  RequirePaused;
  RequireContractOwner;

  is_paused := false;
  e = {
    _eventname: "Unpause";
    is_paused: false
  };
  event e
end

(* allowlist required before create collection *)